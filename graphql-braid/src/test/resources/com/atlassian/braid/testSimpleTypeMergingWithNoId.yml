request:
  query: |
    query($id: String!) {
      foo(id: $id) {
        name
        bar {
          title
        }
      }
    }
  variables:
    id: fooid1

response:
  errors: []
  data:
    foo:
      name: FooId1
      bar:
        title: BarTitle1

schemaSources:
  - namespace: fookey
    schema: |
      schema {
          query: MyQuery
      }
      type MyQuery {
          foo(id: String) : Foo
      }
      type Foo {
          key: String
      }
    extensions:
      - type: Foo
        field: key
        by:
          namespace: foo
          type: FooObject
          query: foo
          arg: key
    expected:
      query: |
        query Bulk_Foo($id100: String!) {
          foo100: foo(id: $id100) {
            key
          }
        }
      variables:
        id100: fooid1
    response:
      data:
        foo100:
          key: fookey1
      errors: []
  - namespace: foo
    schema: |
      schema {
          query: Query
      }
      type Query {
          foo(key: String) : FooObject
      }
      type FooObject {
        name: String
        bar: Bar
      }
      type Bar {
        title: String
      }

    # those 2 props are purely to avoid conflicts,
    # ultimately a merge type should do this auto-magically...
#    typeAliases:
#      Foo: FooObject
    queryFields:
      - foo:fooobject

    expected:
      query: |
        query Bulk_Foo($key100: String) {
          foo100: foo(key: $key100) {
            bar {
              title
            }
            name
          }
        }
      variables:
        key100: fookey1
    response:
      data:
        foo100:
          name: FooId1
          bar:
            title: BarTitle1
      errors: []
